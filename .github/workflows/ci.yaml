name: ci

on:
  push:
    branches: ["feature/**"]
    paths:
      - '**.go'
      - '**.mod'
      - '**.sum'
      - 'charts/**'
      - 'cmd/**'
      - '.github/workflows/ci.yaml'
      - 'Makefile'
  pull_request:
    branches: ["main", "feature/**"]
    paths:
      - '**.go'
      - '**.mod'
      - '**.sum'
      - 'charts/**'
      - 'cmd/**'
      - '.github/workflows/ci.yml'
      - 'Makefile'

env:
  REGISTRY: ghcr.io
  GO_VERSION: '1.24.4'


jobs:

  lint:
    name: 🔍 Lint Go Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: v2.1.6

      - name: Run vet
        run: go vet ./...

  test:
    name: 🧪 Run Go Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run tests
        run: make test

  build:
    name: 🏗️ Build Binary
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Go Binary
        run: make build

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: k8s-controller-${{ github.sha }}
          path: bin/k8s-controller


  docker:
    name: 🐳 Build, Scan, Push Docker Image
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build a docker image
        run: make build

      - name: Extract version and commit
        run: |
          echo "VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Show all vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@v0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ env.VERSION }}-${{ env.COMMIT }}
          format: table
          ignore-unfixed: true
          # FULL picture, no exit code

      - name: Fail on CRITICAL vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@v0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ env.VERSION }}-${{ env.COMMIT }}
          format: table
          severity: CRITICAL
          ignore-unfixed: true
          exit-code: 1
          # Vulnerability guardrails, exit on CRITICAL, if any
